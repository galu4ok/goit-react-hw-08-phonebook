{"version":3,"file":"static/js/909.a73353cb.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactsForm/ContactsForm.styled.js","components/ContactsForm/ContactsForm.js","components/ContactItem/ContactItem.styled.js","components/ContactItem/ContactItem.js","components/ContactsList/ContactsList.styled.js","components/ContactsList/ContactsList.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","components/ContactsCounter/ContactsCounter.js","components/GlobalStyle.js","pages/ContactsPage/ContactsPage.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\nexport const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter;\nexport const selectIsLoading = state => state.contacts.IsLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n\nexport const selectContactsCount = createSelector(\n  [selectContacts],\n  contacts => {\n    return contacts.length;\n  }\n);\n","import styled from 'styled-components';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\nexport const StyledField = styled(Field)`\n  padding: 5px;\n  height: 30px;\n  border: 1px solid grey;\n  border-radius: 5px;\n`;\n\nexport const StyledError = styled(ErrorMessage)`\n  font-style: italic;\n  font-size: 10px;\n  color: tomato;\n`;\nexport const AddBtn = styled.button`\n  width: 120px;\n  height: 30px;\n  color: black;\n  border: 1px solid grey;\n  border-radius: 5px;\n  margin-bottom: 20px;\n\n  &:hover {\n    background-color: teal;\n    color: white;\n  }\n`;\n","import { Field, Formik } from 'formik';\nimport {\n  StyledForm,\n  StyledField,\n  StyledError,\n  AddBtn,\n} from './ContactsForm.styled';\nimport * as Yup from 'yup';\nimport { nanoid } from 'nanoid';\nimport { PatternFormat } from 'react-number-format';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nconst schema = Yup.object().shape({\n  name: Yup.string().required(\n    '*The field cannot be empty!Please enter the name'\n  ),\n  number: Yup.string().required(\n    '*The field cannot be empty!Please enter the number'\n  ),\n});\n\nexport const ContactsForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const onSubmit = (values, actions) => {\n    if (contacts.find(contact => contact.name === values.name)) {\n      return alert(`Contact ${values.name} is already in contacts`);\n    }\n    dispatch(addContact({ id: nanoid(), ...values }));\n    actions.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={schema}\n      onSubmit={onSubmit}\n    >\n      <StyledForm autoComplete=\"off\">\n        <label>Name</label>\n        <Field\n          as={StyledField}\n          name=\"name\"\n          placeholder=\"Enter name\"\n          style={{ width: '440px' }}\n        />\n        <StyledError name=\"name\" component=\"div\" />\n        <label>Number</label>\n        <Field\n          as={PatternFormat}\n          customInput={StyledField}\n          name=\"number\"\n          placeholder=\"Enter number\"\n          variant=\"standard\"\n          style={{ width: '440px' }}\n          format=\"###-##-##\"\n          allowEmptyFormatting={true}\n          mask=\"#\"\n        />\n        <StyledError name=\"number\" component=\"div\" />\n        <AddBtn type=\"submit\">Add contact</AddBtn>\n      </StyledForm>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  /* gap: 20px; */\n  align-items: center;\n`;\n\nexport const Text = styled.p`\n  color: #444444;\n  text-align: center;\n  padding: 5px;\n`;\n\nexport const SpanText = styled.span`\n  font-weight: 500;\n  padding-left: 15px;\n`;\nexport const DeleteBtn = styled.button`\n  position: absolute;\n  font-size: 14px;\n  border: none;\n  outline: none;\n  padding: 5px;\n  border: 1px solid grey;\n  border-radius: 5px;\n  margin-left: 380px;\n  width: 60px;\n\n  &:hover {\n    background-color: teal;\n    outline: teal;\n    color: #ffffff;\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { Wrapper, Text, SpanText, DeleteBtn } from './ContactItem.styled';\n\nexport const ContactItem = ({ contact: { name, number, id } }) => {\n  const dispatch = useDispatch();\n  const onDelete = () => dispatch(deleteContact(id));\n  return (\n    <Wrapper>\n      <Text>\n        {name}:<SpanText>{number}</SpanText>\n      </Text>\n      <DeleteBtn type=\"button\" onClick={onDelete}>\n        Delete\n      </DeleteBtn>\n    </Wrapper>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  width: 440px;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  border-radius: 5px;\n`;\n\nexport const ListItem = styled.li`\n  display: flex;\n  justify-content: flex-start;\n`;\n","import { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\nimport { ContactItem } from 'components/ContactItem/ContactItem';\nimport { List, ListItem } from './ContactsList.styled';\n\nexport const ContactsList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n\n  return (\n    <List>\n      {contacts.map(contact => (\n        <ListItem key={contact.id}>\n          <ContactItem contact={contact} />\n        </ListItem>\n      ))}\n    </List>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FilterInput = styled.input`\n  padding: 5px;\n  height: 30px;\n  border: 1px solid grey;\n  border-radius: 5px;\n  box-sizing: border-box;\n  width: 220px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { changeFilter } from 'redux/contacts/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { FilterInput } from './Filter.styled';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  const onChange = evt => {\n    dispatch(changeFilter(evt.target.value));\n  };\n  return (\n    <div>\n      <p>Find contacts by name</p>\n      <FilterInput\n        type=\"text\"\n        value={filter}\n        onChange={onChange}\n        placeholder=\"Search name...\"\n      />\n    </div>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport { selectContactsCount } from 'redux/contacts/selectors';\n\nexport const ContactsCounter = () => {\n  const count = useSelector(selectContactsCount);\n\n  return (\n    <div>\n      <hr />\n      <p>Contacts count: {count}</p>\n    </div>\n  );\n};\n","import { createGlobalStyle } from 'styled-components';\nimport 'modern-normalize';\n\nexport const GlobalStyle = createGlobalStyle`body {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n\nh1,\nh2,\nh3,\nh4,\np {\n  margin: 0px;\n  padding: 5px;\n}\n\nul {\n  margin: 0;\n  padding: 0;\n  }\n\na {\n  display: block;\n  color: currentColor;\n  text-decoration: none;\n  cursor: pointer;\n}\n\nbutton {\n  cursor: pointer;\n}\n\nimg {\n  display: block;\n}\nh1,h2 {\n  margin-bottom: 10px;\n  }\n\n#root {\n  margin: 30px;\n  padding: 30px;\n  background-color: #b5e6ac;\n  width: 500px;\n  display: block;\n  border-radius: 8px;\n  box-shadow: 1px 1px 8px 0px #000000;  \n}\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { ContactsForm } from 'components/ContactsForm/ContactsForm';\nimport { ContactsList } from 'components/ContactsList/ContactsList';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactsCounter } from 'components/ContactsCounter/ContactsCounter';\nimport { GlobalStyle } from 'components/GlobalStyle';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  // Отримуємо частини стану\n  const error = useSelector(selectError);\n  const isLoading = useSelector(selectIsLoading);\n  // Викликаємо операцію (асинхронний генератор екшену)\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  // Рендеримо розмітку в залежності від значень у стані\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <ContactsForm />\n      <h2>Contacts</h2>\n      <Filter />\n      {isLoading && !error && <b>Request in progress... </b>}\n      <ContactsList />\n      <ContactsCounter />\n      <GlobalStyle />\n    </>\n  );\n};\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","items","selectFilter","filter","selectIsLoading","IsLoading","selectError","error","selectVisibleContacts","createSelector","contact","name","toLowerCase","includes","selectContactsCount","length","StyledForm","styled","Form","_templateObject","_taggedTemplateLiteral","StyledField","Field","_templateObject2","StyledError","ErrorMessage","_templateObject3","AddBtn","_templateObject4","schema","Yup","shape","required","number","ContactsForm","useSelector","dispatch","useDispatch","_jsx","Formik","initialValues","validationSchema","onSubmit","values","actions","find","alert","concat","addContact","_objectSpread","id","nanoid","resetForm","children","_jsxs","autoComplete","as","placeholder","style","width","component","PatternFormat","customInput","variant","format","allowEmptyFormatting","mask","type","Wrapper","Text","SpanText","DeleteBtn","ContactItem","_ref","_ref$contact","onClick","deleteContact","List","ListItem","ContactsList","map","FilterInput","Filter","value","onChange","evt","changeFilter","target","ContactsCounter","count","GlobalStyle","createGlobalStyle","isLoading","useEffect","fetchContacts","_Fragment"],"sourceRoot":""}